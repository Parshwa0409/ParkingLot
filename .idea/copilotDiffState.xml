<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Parking Lot System&#10;&#10;A modern, object-oriented implementation of a parking lot management system. The system handles vehicle parking, spot allocation, and cost calculation with different pricing strategies.&#10;&#10;## System Overview&#10;&#10;The parking lot system implements core parking management functionalities with a focus on extensibility and maintainability. It follows SOLID principles and employs various design patterns to ensure clean code architecture.&#10;&#10;### Core Features&#10;&#10;- Vehicle parking and unparking&#10;- Dynamic spot allocation based on vehicle type&#10;- Time-based parking cost calculation&#10;- Different pricing strategies based on parking duration&#10;- Real-time parking lot status reporting&#10;&#10;## Architecture&#10;&#10;### Design Patterns Used&#10;&#10;1. **Strategy Pattern**&#10;   - Used for implementing different cost calculation strategies&#10;   - Strategies:&#10;     - Under one hour (1.5x rate)&#10;     - Regular hourly rate (n * rate)&#10;     - Daily rate (20 * rate * n)&#10;     - Four-hour discount&#10;&#10;2. **Factory Pattern**&#10;   - `ParkingSpotTypeFactory`: Maps vehicle types to appropriate spot types&#10;   - `TicketFactory`: Handles ticket creation and initialization&#10;   - `CostCalculationFactory`: Creates appropriate cost calculation strategy&#10;&#10;3. **Manager Pattern**&#10;   - `ParkingLotManager`: Central orchestrator for all parking operations&#10;   - Handles validation, spot finding, and operation coordination&#10;&#10;### Core Components&#10;&#10;1. **ParkingLot**&#10;   - Maintains the state of parking spots&#10;   - Manages list of parked vehicles and issued tickets&#10;   - Handles basic spot operations&#10;&#10;2. **ParkingLotManager**&#10;   - Orchestrates parking operations&#10;   - Handles vehicle entry and exit&#10;   - Manages ticket issuance and cost calculation&#10;   - Provides status reporting&#10;&#10;3. **Ticket**&#10;   - Records parking session details&#10;   - Tracks entry/exit times&#10;   - Stores cost information&#10;&#10;4. **Abstractions**&#10;   - `IParkingSpot`: Interface for parking spot operations&#10;   - `IVehicle`: Interface for vehicle operations&#10;   - `CostCalculation`: Interface for cost calculation strategies&#10;&#10;## Implementation Details&#10;&#10;### Vehicle and Spot Types&#10;```java&#10;public enum VehicleType {&#10;    TwoWheeler,&#10;    ThreeWheeler,&#10;    FourWheeler&#10;}&#10;&#10;public enum ParkingSpotType {&#10;    TwoWheelerSpot,&#10;    ThreeWheelerSpot,&#10;    FourWheelerSpot&#10;}&#10;```&#10;&#10;### Cost Calculation&#10;Different strategies for cost calculation based on parking duration:&#10;- Under 1 hour: 1.5x base rate&#10;- Regular hours: n * base rate&#10;- Daily rate: 20 * base rate * number of days&#10;- Special 4-hour discount available&#10;&#10;### Spot Allocation&#10;- Spots are assigned based on vehicle type&#10;- Each spot type has a specific base cost&#10;- Automatic matching of vehicle type to appropriate spot type&#10;&#10;## Usage Example&#10;&#10;```java&#10;// Create parking lot and manager&#10;ParkingLot parkingLot = new ParkingLot(initialSpots);&#10;ParkingLotManager manager = new ParkingLotManager(parkingLot);&#10;&#10;// Park a vehicle&#10;Vehicle car = new Vehicle(&quot;KA-01-HH-1234&quot;, VehicleType.FourWheeler);&#10;Ticket ticket = manager.parkVehicle(car);&#10;&#10;// Unpark and get cost&#10;double cost = manager.unparkVehicle(car.getLicensePlate());&#10;&#10;// Get parking lot status&#10;ParkingLotStatus status = manager.getReport();&#10;```&#10;&#10;## Design Principles&#10;&#10;1. **Single Responsibility Principle**&#10;   - Each class has a single, well-defined purpose&#10;   - Clear separation between data and operations&#10;&#10;2. **Open/Closed Principle**&#10;   - New vehicle types can be added without modifying existing code&#10;   - Cost calculation strategies can be extended&#10;&#10;3. **Interface Segregation**&#10;   - Clean interfaces with specific purposes&#10;   - No unnecessary method implementations&#10;&#10;4. **Dependency Inversion**&#10;   - High-level modules depend on abstractions&#10;   - Factory patterns for object creation&#10;&#10;## Error Handling&#10;&#10;The system includes comprehensive error handling for:&#10;- Full parking lot&#10;- Invalid vehicle types&#10;- Non-existent vehicles&#10;- Invalid operations&#10;&#10;## Future Extensions&#10;&#10;The system is designed to be easily extended for:&#10;1. Payment processing&#10;2. Multiple parking lots&#10;3. Reservation system&#10;4. Advanced pricing strategies&#10;5. Real-time monitoring&#10;&#10;## Running the Project&#10;&#10;1. Clone the repository&#10;2. Compile the Java files&#10;3. Run the Main class to see the system in action&#10;&#10;The Main class demonstrates:&#10;- Vehicle parking&#10;- Different duration scenarios&#10;- Cost calculation&#10;- Status reporting" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>